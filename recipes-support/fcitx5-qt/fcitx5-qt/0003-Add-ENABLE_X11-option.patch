From 37298e3acc613cbf20d5e52e2c6de530a30a6f3e Mon Sep 17 00:00:00 2001
From: He Yong <hyyoxhk@163.com>
Date: Wed, 29 Nov 2023 14:49:00 +0800
Subject: [PATCH] Add ENABLE_X11 option

it`s easy to port to a pure Wayland environment
that we split the code of x11

Upstream-Status: Submitted [https://github.com/fcitx/fcitx5-qt/pull/53]

Signed-off-by: He Yong <hyyoxhk@163.com>
---
 CMakeLists.txt                                         |  8 +++++++-
 qt4/inputcontext/CMakeLists.txt                        |  6 +++++-
 qt4/inputcontext/qfcitxinputcontext.cpp                | 10 ++++++++++
 qt5/platforminputcontext/CMakeLists.txt                |  6 ++++--
 .../qfcitxplatforminputcontext.cpp                     |  8 ++++++++
 5 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d76aab..3cb6a64 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,6 +13,7 @@ set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
 option(ENABLE_QT4 "Enable Qt 4" On)
 option(ENABLE_QT5 "Enable Qt 5" On)
 option(ENABLE_QT6 "Enable Qt 6" Off)
+option(ENABLE_X11 "Enable X11 support" On)
 option(BUILD_ONLY_PLUGIN "Build only plugin" Off)
 option(BUILD_STATIC_PLUGIN "Build plugin as static" Off)
 option(WITH_FCITX_PLUGIN_NAME "Enable plugin name with fcitx" On)
@@ -43,17 +44,22 @@ include(ECMSetupVersion)
 include(ECMGenerateHeaders)
 include(ECMUninstallTarget)
 
-find_package(XCB REQUIRED COMPONENTS XCB)
+if (ENABLE_X11)
+    find_package(XCB REQUIRED COMPONENTS XCB)
+endif()
 find_package(XKBCommon 0.5.0 REQUIRED COMPONENTS XKBCommon)
 if (NOT BUILD_ONLY_PLUGIN)
 find_package(Fcitx5Utils 5.0.16 REQUIRED)
 endif()
+
+if (ENABLE_X11)
 find_package(X11 REQUIRED)
 
 add_library(X11Import UNKNOWN IMPORTED)
 set_target_properties(X11Import PROPERTIES
     IMPORTED_LOCATION "${X11_X11_LIB}"
     INTERFACE_INCLUDE_DIRECTORIES "${X11_X11_INCLUDE_PATH}")
+endif()
 
 if (BUILD_ONLY_PLUGIN)
 # Dup a little bit option here.
diff --git a/qt4/inputcontext/CMakeLists.txt b/qt4/inputcontext/CMakeLists.txt
index 3ed1834..19804a6 100644
--- a/qt4/inputcontext/CMakeLists.txt
+++ b/qt4/inputcontext/CMakeLists.txt
@@ -29,8 +29,12 @@ target_link_libraries(qtim-fcitx5
                           XCB::XCB
                           Fcitx5Qt4::DBusAddons
                           XKBCommon::XKBCommon
-                          X11Import
                          )
 
+if (ENABLE_X11)
+    target_link_libraries(qtim-fcitx5 X11Import)
+    target_compile_definitions(qtim-fcitx5 PRIVATE "-DENABLE_X11")
+endif()
+
 set(CMAKE_INSTALL_QT4PLUGINDIR ${QT_PLUGINS_DIR} CACHE PATH "Qt4 plugin dir")
 install(TARGETS qtim-fcitx5 DESTINATION ${CMAKE_INSTALL_QT4PLUGINDIR}/inputmethods)
diff --git a/qt4/inputcontext/qfcitxinputcontext.cpp b/qt4/inputcontext/qfcitxinputcontext.cpp
index f7c8a3d..e806f03 100644
--- a/qt4/inputcontext/qfcitxinputcontext.cpp
+++ b/qt4/inputcontext/qfcitxinputcontext.cpp
@@ -14,7 +14,9 @@
 #include <QTextCharFormat>
 #include <QTextCodec>
 #include <QWidget>
+#ifdef ENABLE_X11
 #include <QX11Info>
+#endif
 #include <array>
 #include <errno.h>
 #include <signal.h>
@@ -27,7 +29,9 @@
 #include "fcitxqtwatcher.h"
 #include "qfcitxinputcontext.h"
 
+#ifdef ENABLE_X11
 #include <X11/Xlib.h>
+#endif
 #include <memory>
 #undef KeyPress
 #undef KeyRelease
@@ -36,6 +40,7 @@
 
 namespace fcitx {
 
+#ifdef ENABLE_X11
 void setFocusGroupForX11(const QByteArray &uuid) {
     if (uuid.size() != 16) {
         return;
@@ -66,6 +71,7 @@ void setFocusGroupForX11(const QByteArray &uuid) {
     XSendEvent(xdisplay, window, False, NoEventMask, &ev);
     XSync(xdisplay, False);
 }
+#endif
 
 static bool key_filtered = false;
 
@@ -364,7 +370,11 @@ void QFcitxInputContext::createInputContextFinished(const QByteArray &uuid) {
 
     if (proxy->isValid()) {
         QWidget *window = qApp->focusWidget();
+#ifdef ENABLE_X11
         setFocusGroupForX11(uuid);
+#else
+        Q_UNUSED(uuid);
+#endif
         if (window && window == w) {
             cursorRectChanged();
             proxy->focusIn();
diff --git a/qt5/platforminputcontext/CMakeLists.txt b/qt5/platforminputcontext/CMakeLists.txt
index ed19dc6..271864b 100644
--- a/qt5/platforminputcontext/CMakeLists.txt
+++ b/qt5/platforminputcontext/CMakeLists.txt
@@ -41,11 +41,13 @@ target_link_libraries(fcitx5platforminputcontextplugin
                           Qt5::Gui
                           Qt5::DBus
                           Qt5::Widgets
-                          XCB::XCB
                           Fcitx5Qt5::DBusAddons
                           XKBCommon::XKBCommon
                          )
-
+if (ENABLE_X11)
+    target_link_libraries(fcitx5platforminputcontextplugin XCB::XCB)
+    target_compile_definitions(fcitx5platforminputcontextplugin PRIVATE "-DENABLE_X11")
+endif()
 include(ECMQueryQmake)
 query_qmake(_QT5PLUGINDIR QT_INSTALL_PLUGINS)
 set(CMAKE_INSTALL_QT5PLUGINDIR ${_QT5PLUGINDIR} CACHE PATH "Qt5 plugin dir")
diff --git a/qt5/platforminputcontext/qfcitxplatforminputcontext.cpp b/qt5/platforminputcontext/qfcitxplatforminputcontext.cpp
index ac8d29a..f9706d1 100644
--- a/qt5/platforminputcontext/qfcitxplatforminputcontext.cpp
+++ b/qt5/platforminputcontext/qfcitxplatforminputcontext.cpp
@@ -31,7 +31,9 @@
 
 #include <array>
 #include <memory>
+#ifdef ENABLE_X11
 #include <xcb/xcb.h>
+#endif
 
 namespace fcitx {
 
@@ -43,6 +45,7 @@ XCBReply<T> makeXCBReply(T *ptr) noexcept {
     return {ptr, &std::free};
 }
 
+#ifdef ENABLE_X11
 void setFocusGroupForX11(const QByteArray &uuid) {
     if (uuid.size() != 16) {
         return;
@@ -106,6 +109,7 @@ void setFocusGroupForX11(const QByteArray &uuid) {
                    reinterpret_cast<char *>(&ev));
     xcb_flush(connection);
 }
+#endif
 
 static bool get_boolean_env(const char *name, bool defval) {
     const char *value = getenv(name);
@@ -593,7 +597,11 @@ void QFcitxPlatformInputContext::createInputContextFinished(
 
     if (proxy->isValid()) {
         QWindow *window = focusWindowWrapper();
+#ifdef ENABLE_X11
         setFocusGroupForX11(uuid);
+#else
+        Q_UNUSED(uuid);
+#endif
         if (window && window == w) {
             cursorRectChanged();
             proxy->focusIn();
-- 
2.34.1

